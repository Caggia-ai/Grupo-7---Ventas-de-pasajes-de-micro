# Grupo 7---Sistema para gestionar las ventas de pasajes de micro a distintos destinos y en distintas fechas.
def cargar_lista(destinos_posibles, precios_fijos, lista_dest, lista_cl, lista_micro, lista_precios, cant_pasajeros_micro, precios_por_destino):
    dni_existentes = set()
    cant_ventas = int(input("Ingrese la cantidad de pasajes que se vendieron: "))
    while cant_ventas <= 0:
        print("La cantidad de ventas ingresada es inválida. Ingrese nuevamente\n")
        cant_ventas = int(input("\nIngrese la cantidad de pasajes que se vendieron: "))

    for i in range(cant_ventas):
        dest = input("\nIngrese el lugar de destino del micro: ").strip()
        while dest.lower() not in [d.lower() for d in destinos_posibles]:
            print("Destino inválido, debe elegir uno disponible.")
            dest = input("Ingrese nuevamente el lugar de destino: ").strip()
        for d in destinos_posibles:
            if dest.lower() == d.lower():
                dest = d
                break
        lista_dest.append(dest)

        idx = destinos_posibles.index(dest)
        precio = precios_fijos[idx]
        lista_precios.append(precio)

        precios_por_destino[dest] = precios_por_destino.get(dest, 0) + precio

        micro_id = input("\nIngrese el ID del micro: ").strip()
        while micro_id.isdigit() == False:
            print("El ID del micro ingresado es inválido. Por favor, ingrese nuevamente.")
            micro_id = input("\nIngrese el ID del micro: ").strip()
        lista_micro.append(micro_id)

        cant_pasajeros_micro[micro_id] = cant_pasajeros_micro.get(micro_id, 0) + 1

        nombre = input("Ingrese el nombre del pasajero: ").title()
        apellido = input("Ingrese el apellido del pasajero: ").title()
        dni = input("Ingrese el DNI del pasajero: ").strip()
        dni = validar_dni(dni, dni_existentes)
        
        lista_cl.append([nombre, apellido, dni])

    return lista_dest, lista_cl, lista_micro, lista_precios, cant_pasajeros_micro, precios_por_destino

def validar_dni(dni, dni_existentes):
    while not (dni.isdigit() and 7 <= len(dni) <= 8) or dni in dni_existentes:
        if not dni.isdigit() or not (7 <= len(dni) <= 8):
            print("El DNI ingresado es inválido. Por favor, ingrese nuevamente.")
        else:
            print("Este DNI ya fue ingresado. Por favor ingrese uno diferente.")
        dni = input("Ingrese el DNI del pasajero: ").strip()
    dni_existentes.add(dni)
    return dni

def crear_matriz(ldestino):
    filas = 5
    columnas = len(ldestino)
    matriz = [[0]*columnas for i in range(filas)]
    return matriz

def llenar_matriz(matriz,ldestino,lid,lsalida,lllegada,lpasajeros):
    fila=len(matriz)
    columna=len(matriz[0])
    for i in range(fila):
        for j in range(columna):
            if i==0:
                matriz[i][j]=ldestino[j]
            elif i==1:
                matriz[i][j]=lid[j]
            elif i==2:
                matriz[i][j]=lsalida[j]
            elif i==3:
                matriz[i][j]=lllegada[j]
            else:
                matriz[i][j]=lpasajeros[j]
    return matriz

def imprimir_matriz(matriz):
    filas=len(matriz)
    columnas=len(matriz[0])
    for i in range(filas):
        if i==0:
            print("\nDestino: ")
        elif i==1:
            print("\nId del micro: ")
        elif i==2:
            print("\nFecha de salida: ")
        elif i==3:
            print("\nFecha de llegada: ")
        else:
            print("\nCant. de pasajeros: ")
        for j in range(columnas):
            print(matriz[i][j],end=" ")
        print()

def validar_fecha_formato(d, m, a):
    if not (1 <= m <= 12):
        return False
    if d < 1:
        return False
    if m in [1, 3, 5, 7, 8, 10, 12]:
        if d > 31:
            return False
    elif m in [4, 6, 9, 11]:
        if d > 30:
            return False
    elif m == 2:
        if (a % 4 == 0 and a % 100 != 0) or (a % 400 == 0):
            if d > 29:
                return False
        else:
            if d > 28:
                return False
    return True

def dias_en_mes(m, a):
    if m in [1, 3, 5, 7, 8, 10, 12]:
        return 31
    elif m in [4, 6, 9, 11]:
        return 30
    elif m == 2:
        if (a % 4 == 0 and a % 100 != 0) or (a % 400 == 0):
            return 29
        else:
            return 28

def sumar_dias(fecha):
    dia, mes, anio = map(int, fecha.split(','))
    cant_dias = 150
    while cant_dias > 0:
        dias_mes = dias_en_mes(mes, anio)
        if dia + cant_dias <= dias_mes:
            dia = dia + cant_dias
            cant_dias = 0
        else:
            cant_dias = cant_dias - (dias_mes - dia + 1)
            dia = 1
            mes = mes + 1
            if mes > 12:
                mes = 1
                anio = anio + 1
    return f"{dia:02d},{mes:02d},{anio:04d}"

def validar_fecha(d, m, a):
    if not validar_fecha_formato(d, m, a):
        return False
    fecha_ingresada = (a, m, d)
    fecha_minima = (2025, 9, 21)
    fecha_maxima = sumar_dias("21,9,2025")
    dia_m, mes_m, anio_m = map(int, fecha_maxima.split(','))
    fecha_maxima = (anio_m, mes_m, dia_m)
    return fecha_minima < fecha_ingresada <= fecha_maxima

def calcular_ganancias(matriz, precios_establecidos):
    total_de_ganancias = 0
    ganancias_por_destino = [0, 0, 0, 0, 0, 0]  

    cantidad_de_viajes = len(matriz[4])  

    for j in range(cantidad_de_viajes):
        destino = matriz[0][j]
        pasajeros = matriz[4][j]

        if destino == "Mar de Ajó":
            ganancias_por_destino[0] += pasajeros * precios_establecidos[0]
        elif destino == "Pinamar":
            ganancias_por_destino[1] += pasajeros * precios_establecidos[1]
        elif destino == "Villa Gesell":
            ganancias_por_destino[2] += pasajeros * precios_establecidos[2]
        elif destino == "Mar del Plata":
            ganancias_por_destino[3] += pasajeros * precios_establecidos[3]
        elif destino == "Miramar":
            ganancias_por_destino[4] += pasajeros * precios_establecidos[4]
        elif destino == "Necochea":
            ganancias_por_destino[5] += pasajeros * precios_establecidos[5]

    total_de_ganancias = sum(ganancias_por_destino)
    return [total_de_ganancias] + ganancias_por_destino

def destino_mas_frecuente(matriz, posibles_destinos):
    a = b = c = d = e = f = 0

    for destino in matriz[0]:
        if destino == "Mar de Ajó":
            a += 1
        elif destino == "Pinamar":
            b += 1
        elif destino == "Villa Gesell":
            c += 1
        elif destino == "Mar del Plata":
            d += 1
        elif destino == "Miramar":
            e += 1
        elif destino == "Necochea":
            f += 1

    destinos= [a, b, c, d, e, f]
    print(destinos)

    max_frecuencia = max(destinos)

    destinos_mas_frecuentes = []
    for i, cantidad in enumerate(destinos):
        if cantidad == max_frecuencia:
            destinos_mas_frecuentes.append(posibles_destinos[i])

    return destinos_mas_frecuentes

def main():
    posibles_destinos = ["Mar de Ajó", "Pinamar", "Villa Gesell", "Mar del Plata", "Miramar", "Necochea"]
    precios_establecidos = [15000, 20000, 30000, 35000, 40000, 45000]
    
    lista_destinos = []
    lista_clientes = []
    lista_micros = []
    lista_precios = []
    cant_pasajeros_micro = {}
    precios_por_destino = {}
    
    dia = int(input("Ingrese el día: "))
    mes = int(input("Ingrese el mes: "))
    anio = int(input("Ingrese el año: "))
    if validar_fecha(dia, mes, anio):
        print("Fecha válida")
    else:
        print("Fecha inválida")
    
    lista_destinos, lista_clientes, lista_micros, lista_precios, cant_pasajeros_micro, precios_por_destino = cargar_lista(
        posibles_destinos, precios_establecidos, lista_destinos, lista_clientes, lista_micros, lista_precios, cant_pasajeros_micro, precios_por_destino
    )
    matriz = crear_matriz(destinos)
    matriz = llenar_matriz(matriz, destinos, idmicros, salidas, llegada, pasajeros)
    imprimir_matriz(matriz)
    resultados = calcular_ganancias(matriz, precios_establecidos)
    destinos_frecuentes = destino_mas_frecuente(matriz, posibles_destinos)

    print(f"Destinos más frecuentes: {destinos_frecuentes}")
main()
