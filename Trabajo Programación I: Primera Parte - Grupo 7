# Grupo 7---Sistema para gestionar las ventas de pasajes de micro a distintos destinos y en distintas fechas.

def cargar_pasaje(destinos_posibles, precios_fijos, datos):
    dni_existentes = set()
    print("\n--- Destinos Disponibles ---")
    mensaje =  """1. Mar de Ajó
2. Pinamar
3. Villa Gesell
4. Mar del Plata
5. Miramar
6. Necochea
7. Salir"""
    print(mensaje)
    while True:
        try:
            dest = int(input("\nElija su destino: ").strip())
            assert 1 <= dest <= 7
            if dest == 7:
                print("Saliendo...")
                break
            # Falta que pueda entrar y salir de la función libremente
            else:
                destino = destinos_posibles[dest - 1]
                datos["destinos"].append(destino)
                precio = precios_fijos[dest - 1]
                datos["precios"].append(precio)
                print(f"\nHas elegido {destino}. Precio: ${precio}")
                datos["precios_por_destino"][dest] = datos["precios_por_destino"].get(dest, 0) + precio
                break
        except ValueError:
            print("La opción ingresada no es válida.")
        except AssertionError:
            print("Elija una de las opciones posibles (1 a 7).")
    micro_id = input("\nIngrese el ID del micro: ").strip()
    while not micro_id.isdigit():
        print("El ID del micro ingresado es inválido. Ingrese nuevamente.")
        micro_id = input("Ingrese el ID del micro: ").strip()
    datos["micros"].append(micro_id)

    datos["cant_pasajeros_micro"][micro_id] = datos["cant_pasajeros_micro"].get(micro_id, 0) + 1
## fijarse que no se suman la cantidad de pasajeros segun el id ingresado
    nombre = input("Ingrese el nombre del pasajero: ").title()
    nombre = validar_nombre(nombre)
    apellido = input("Ingrese el apellido del pasajero: ").title()
    apellido = validar_apellido(apellido)
    dni = input("Ingrese el DNI del pasajero: ").strip()
    dni = validar_dni(dni, dni_existentes)
        
    datos["clientes"].append([nombre, apellido, dni])

    return datos

def validar_nombre(nombre):
    while not nombre.replace(" ", "").isalpha():
        print("El nombre ingresado no es valido, por favor intentelo nuevamente")
        nombre = input("Ingrese el nombre del pasajero: ").title()
    return nombre 

def validar_apellido(apellido):
    while not apellido.replace(" ", "").isalpha():
        print("El apellido ingresado no es valido, por favor intentelo nuevamente")
        apellido = input("Ingrese el apellido del pasajero: ").title()
    return apellido

def validar_dni(dni, dni_existentes):
    while not (dni.isdigit() and 7 <= len(dni) <= 8) or dni in dni_existentes:
        if not dni.isdigit() or not (7 <= len(dni) <= 8):
            print("El DNI ingresado es inválido, por favor intentelo nuevamente.")
        else:
            print("Este DNI ya fue registrado. Ingrese uno diferente.")
        dni = input("Ingrese el DNI del pasajero: ").strip()
    dni_existentes.add(dni)
    return dni

def crear_matriz(ldestino):
    filas = 5
    columnas = len(ldestino)
    matriz = [[0]*columnas for i in range(filas)]
    return matriz

def llenar_matriz(matriz, datos):
    fila = len(matriz)
    columna = len(matriz[0])
    for i in range(fila):
        for j in range(columna):
            if i == 0:
                matriz[i][j] = datos["destinos"][j]
            elif i == 1:
                matriz[i][j] = datos["micros"][j]
            elif i == 2:
                matriz[i][j] = datos["salidas"][j]
            elif i == 3:
                matriz[i][j] = datos["llegadas"][j]
            else:
                matriz[i][j] = datos["pasajeros"][j]
    return matriz

def imprimir_matriz(matriz):
    filas = len(matriz)
    columnas = len(matriz[0])
    datos = ["Destino", "Id del micro", "Fecha de salida", "Fecha de llegada", "Cant. de pasajeros"]
    for j in range(columnas):
        print(f"\n--- Viaje {j + 1} ---")
        for i in range(filas):
            print(f"{datos[i]}: {matriz[i][j]}")

def validar_fecha_formato(d, m, a):
    if not (1 <= m <= 12):
        return False
    if d < 1:
        return False
    if m in [1, 3, 5, 7, 8, 10, 12]:
        if d > 31:
            return False
    elif m in [4, 6, 9, 11]:
        if d > 30:
            return False
    elif m == 2:
        if (a % 4 == 0 and a % 100 != 0) or (a % 400 == 0):
            if d > 29:
                return False
        else:
            if d > 28:
                return False
    return True

def dias_en_mes(m, a):
    if m in [1, 3, 5, 7, 8, 10, 12]:
        return 31
    elif m in [4, 6, 9, 11]:
        return 30
    elif m == 2:
        if (a % 4 == 0 and a % 100 != 0) or (a % 400 == 0):
            return 29
        else:
            return 28

def sumar_dias(fecha):
    dia, mes, anio = map(int, fecha.split(','))
    cant_dias = 150
    while cant_dias > 0:
        dias_mes = dias_en_mes(mes, anio)
        if dia + cant_dias <= dias_mes:
            dia = dia + cant_dias
            cant_dias = 0
        else:
            cant_dias = cant_dias - (dias_mes - dia + 1)
            dia = 1
            mes = mes + 1
            if mes > 12:
                mes = 1
                anio = anio + 1
    return f"{dia:02d},{mes:02d},{anio:04d}"

def validar_fecha(d, m, a):
    if not validar_fecha_formato(d, m, a):
        return False
    fecha_ingresada = (a, m, d)
    fecha_minima = (2025, 9, 21)
    fecha_maxima = sumar_dias("21,9,2025")
    dia_m, mes_m, anio_m = map(int, fecha_maxima.split(','))
    fecha_maxima = (anio_m, mes_m, dia_m)
    return fecha_minima < fecha_ingresada <= fecha_maxima

def comparar_fechas(fecha_ida, fecha_vuelta):
    dia1, mes1, anio1 = map(int, fecha_ida.split(','))
    dia2, mes2, anio2 = map(int, fecha_vuelta.split(','))
    fecha1 = (anio1, mes1, dia1)
    fecha2 = (anio2, mes2, dia2)
    return fecha1 <= fecha2


def calcular_ganancias(matriz, precios_establecidos):
    total_de_ganancias = 0
    ganancias_por_destino = [0, 0, 0, 0, 0, 0]  

    cantidad_de_viajes = len(matriz[4])  

    for j in range(cantidad_de_viajes):
        destino = matriz[0][j]
        pasajeros = matriz[4][j]

        if destino == "Mar de Ajó":
            ganancias_por_destino[0] += pasajeros * precios_establecidos[0]
        elif destino == "Pinamar":
            ganancias_por_destino[1] += pasajeros * precios_establecidos[1]
        elif destino == "Villa Gesell":
            ganancias_por_destino[2] += pasajeros * precios_establecidos[2]
        elif destino == "Mar del Plata":
            ganancias_por_destino[3] += pasajeros * precios_establecidos[3]
        elif destino == "Miramar":
            ganancias_por_destino[4] += pasajeros * precios_establecidos[4]
        elif destino == "Necochea":
            ganancias_por_destino[5] += pasajeros * precios_establecidos[5]

    total_de_ganancias = sum(ganancias_por_destino)
    return [total_de_ganancias] + ganancias_por_destino

def destino_mas_frecuente(matriz, posibles_destinos):
    a = b = c = d = e = f = 0

    for destino in matriz[0]:
        if destino == "Mar de Ajó":
            a += 1
        elif destino == "Pinamar":
            b += 1
        elif destino == "Villa Gesell":
            c += 1
        elif destino == "Mar del Plata":
            d += 1
        elif destino == "Miramar":
            e += 1
        elif destino == "Necochea":
            f += 1

    destinos= [a, b, c, d, e, f]

    max_frecuencia = max(destinos)

    destinos_mas_frecuentes = []
    for i, cantidad in enumerate(destinos):
        if cantidad == max_frecuencia:
            destinos_mas_frecuentes.append(posibles_destinos[i])
    return destinos_mas_frecuentes

def main():
    mensaje_base = """¡BIENVENIDOS!"""
    print(mensaje_base)
    posibles_destinos = ["Mar de Ajó", "Pinamar", "Villa Gesell", "Mar del Plata", "Miramar", "Necochea"]
    precios_establecidos = [15000, 20000, 30000, 35000, 40000, 45000]
    
    datos = {
        "destinos": [], "clientes": [], "micros": [], "precios": [],
        "salidas": [], "llegadas": [], "pasajeros": [],
        "cant_pasajeros_micro": {}, "precios_por_destino": {},
    }

    while True:
        while True:
            try:
                print("""\n--- MENÚ PRINCIPAL ---
1. Agregar pasaje
2. Cambiar destino
3. Eliminar pasaje
4. Mostrar estado de la matriz
5. Salir\n""")
                menu = int(input("OPCIÓN? "))
                assert 1 <= menu <= 5
                break
            except ValueError:
                print("No exista la opción seleccionada.")
            except AssertionError:
                print("Elija una de las opciones posibles.\n")

        if menu == 1:
            datos = cargar_pasaje(posibles_destinos, precios_establecidos, datos)
            micro = datos["micros"][-1]
            while True:
                dia_s = input(f"\nDía de salida del micro {micro}: ").strip()
                mes_s = input("Mes de salida: ").strip()
                anio_s = input("Año de salida: ").strip()
                
                if dia_s.isdigit() and mes_s.isdigit() and anio_s.isdigit():
                    dia_s, mes_s, anio_s = int(dia_s), int(mes_s), int(anio_s)
                    fecha_salida_str = f"{dia_s:02d},{mes_s:02d},{anio_s:04d}"
                    if validar_fecha(dia_s, mes_s, anio_s):
                        break
                print("Fecha de salida inválida. Ingrese nuevamente.")

            while True:
                dia_l = input(f"\nDía de llegada del micro {micro}: ").strip()
                mes_l = input("Mes de llegada: ").strip()
                anio_l = input("Año de llegada: ").strip()
                
                if dia_l.isdigit() and mes_l.isdigit() and anio_l.isdigit():
                    dia_l, mes_l, anio_l = int(dia_l), int(mes_l), int(anio_l)
                    fecha_llegada_str = f"{dia_l:02d},{mes_l:02d},{anio_l:04d}"
                    if validar_fecha(dia_l, mes_l, anio_l) and comparar_fechas(fecha_salida_str, fecha_llegada_str):
                        break
                print("Fecha de llegada inválida. Debe ser posterior a la de salida. Ingrese nuevamente.")

            datos["salidas"].append(fecha_salida_str)
            datos["llegadas"].append(fecha_llegada_str)
            datos["pasajeros"].append(1)

        elif menu == 2:
        # Todavía no funciona
            if not datos["clientes"]:
                print("No hay pasajes cargados para modificar.")
            else:
                print("\n--- Pasajes cargados ---")
                for i, c in enumerate(datos["clientes"]):
                    print(f"{i+1}. {c[0]} {c[1]} - DNI: {c[2]} - Destino: {datos['destinos'][i]}")
                try:
                    indice = int(input("Seleccione el número de pasaje a modificar: ")) - 1
                    assert 0 <= indice < len(datos["clientes"])
                    print("\n--- Nuevos destinos posibles ---")
                    for j, d in enumerate(posibles_destinos, 1):
                        print(f"{j}. {d}")
                    nuevo_dest = int(input("Ingrese el nuevo destino: "))
                    assert 1 <= nuevo_dest <= 6
                    datos["destinos"][indice] = posibles_destinos[nuevo_dest - 1]
                    datos["precios"][indice] = precios_establecidos[nuevo_dest - 1]
                    print("Destino modificado correctamente.")
                except (ValueError, AssertionError):
                    print("Opción inválida. No se realizaron cambios.")

        elif menu == 3:
            if not datos["clientes"]:
                print("No hay pasajes cargados para eliminar.")
            else:
                print("\n--- Pasajes cargados ---")
                for i, c in enumerate(datos["clientes"]):
                    print(f"{i+1}. {c[0]} {c[1]} - DNI: {c[2]} - Destino: {datos['destinos'][i]}")
                try:
                    indice = int(input("Seleccione el número de pasaje a eliminar: ")) - 1
                    assert 0 <= indice < len(datos["clientes"])
                    eliminado = datos["clientes"].pop(indice)
                    datos["destinos"].pop(indice)
                    datos["micros"].pop(indice)
                    datos["precios"].pop(indice)
                    datos["salidas"].pop(indice)
                    datos["llegadas"].pop(indice)
                    datos["pasajeros"].pop(indice)
                    print(f"Pasaje de {eliminado[0]} {eliminado[1]} eliminado correctamente.")
                except (ValueError, AssertionError):
                    print("Opción inválida. No se eliminaron registros.")

        elif menu == 4:
        # Todavía no funciona
            if not datos["destinos"]:
                print("No hay datos para mostrar.")
            else:
                matriz = crear_matriz(datos["destinos"])
                matriz = llenar_matriz(matriz, datos)
                imprimir_matriz(matriz)

        elif menu == 5:
            print("Cerrando programa...")
            matriz = crear_matriz(datos["destinos"])
            matriz = llenar_matriz(matriz, datos)
            resultados = calcular_ganancias(matriz, precios_establecidos)
            destinos_frecuentes = destino_mas_frecuente(matriz, posibles_destinos)
            print("\n--- RESULTADOS FINALES ---")
            print(f"Ganancia total: ${resultados[0]}")
            for i, destino in enumerate(posibles_destinos):
                print(f"{destino}: ${resultados[i+1]}")
            print(f"Destinos más frecuentes: {', '.join(destinos_frecuentes)}")
            break
main()
